import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
clean{
    delete file("src/main/jniLibs")
}

def ASSETS_GUI="gui"
def ASSETS_S57="s57data"
def ASSETS_PLUGIN="plugin"

def IDENTITYPROVIDER_PKG="org.opencpn.opencpn"
def IDENTITYPROVIDER_NAME="identityprovider"
//if set to false we start the provider as a library from within java
def RUN_EXE=true
def SHOW_IMPORT_OPENCPN=false

File assetsDir = new File(project.rootDir, "assets")
if (! project.hasProperty('packageVersion')){
    SimpleDateFormat f=new SimpleDateFormat('yyyyMMdd')
    project.ext.avnavVersion=f.format(new Date())
}
else{
    project.ext.avnavVersion=project.packageVersion
}
def ks = System.getenv("ANDROID_KEYSTORE")
def ksbeta = System.getenv("ANDROID_KEYSTORE_BETA")
def ksupload = System.getenv("ANDROID_KEYSTORE_UPLOAD")
def kspw = System.getenv("ANDROID_KEYPASS")
def kalias = System.getenv("ANDROID_KEYALIAS")
def kpwd = System.getenv("ANDROID_KEYPASS")
android {
    compileSdkVersion 34
    externalNativeBuild {
        cmake {
            path "../../provider/CMakeLists.txt"
            version "3.18.1"
        }
    }
    defaultConfig {
        applicationId "de.wellenvogel.ochartsprovider"
        versionName "avnavocharts-$avnavVersion"
        versionCode Integer.parseInt(project.avnavVersion.replaceAll("[^0-9]*",""))
        minSdkVersion 24
        targetSdkVersion 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared","-DAVNAV_ANDROID=on","-DNO_TEST=on"
                if (RUN_EXE){
                    arguments "-DANDROID_BUILD_EXE=on"
                }
            }
        }
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
            abiFilters   'armeabi-v7a','arm64-v8a'
        }
        packagingOptions{
            jniLibs{
                useLegacyPackaging true
            }
        }
        buildConfigField("Boolean","AVNAV_EXE","$RUN_EXE")
        buildConfigField("Boolean","SHOW_IMPORT_OPENCPN","$SHOW_IMPORT_OPENCPN")
        buildConfigField("String","ASSETS_GUI","\"$ASSETS_GUI\"");
        buildConfigField("String","ASSETS_S57","\"$ASSETS_S57\"");
        buildConfigField("String","ASSETS_PLUGIN","\"$ASSETS_PLUGIN\"");
        buildConfigField("String","IDPROVIDER_PKG","\"$IDENTITYPROVIDER_PKG\"")
        buildConfigField("String","IDPROVIDER_NAME","\"$IDENTITYPROVIDER_NAME\"")
        vectorDrawables {
            useSupportLibrary true
        }
    }
    sourceSets{
        main {
            assets.srcDirs=[assetsDir]
        }
    }
    signingConfigs {

        def hasCfg=false
        if (ks != null && kspw != null && kalias != null && kpwd != null) {
            hasCfg=true
            config {
                storeFile file(ks)
                storePassword kspw
                keyAlias kalias
                keyPassword kpwd
            }
        }
        if(ksbeta != null && kspw != null && kalias != null && kpwd != null) {
            hasCfg=true
            create("beta") {
                storeFile file(ksbeta)
                storePassword kspw
                keyAlias kalias
                keyPassword kpwd
            }
        }
        if(ksupload != null && kspw != null && kpwd != null) {
            create("upload") {
                storeFile file(ksupload)
                storePassword kspw
                keyAlias "upload"
                keyPassword kpwd
            }
        }
        if (! hasCfg){
                logger.warn("no signing config set...")
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (ks != null) {
                logger.lifecycle("using keystore $ks for release")
                signingConfig signingConfigs.config
            }
            manifestPlaceholders.label='avocharts'
            manifestPlaceholders.suffix=""
            manifestPlaceholders.queryPkg=IDENTITYPROVIDER_PKG
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_VARIANT=0"
                }
            }
            packagingOptions{
                doNotStrip '**/*oex*.so'
            }
        }
        debug{
            applicationIdSuffix ".debug"
            manifestPlaceholders.label='avocharts-debug'
            manifestPlaceholders.suffix='.debug'
            manifestPlaceholders.queryPkg=IDENTITYPROVIDER_PKG
            if (System.getenv("ANDROID_KEYSTORE") != null) {
                signingConfig signingConfigs.config
            }
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_VARIANT=2"
                }
            }
        }
        beta {
            initWith release
            if (ksbeta != null) {
                logger.lifecycle("using keystore $ksbeta for beta")
                signingConfig signingConfigs.beta
            }
            else if (ks != null) {
                logger.lifecycle("using keystore $ks for beta")
                signingConfig signingConfigs.config
            }
            else{
                logger.lifecycle("using debug signing for beta")
                signingConfig buildTypes.debug.signingConfig
            }
            applicationIdSuffix ".beta"
            manifestPlaceholders.label='avocharts-beta'
            manifestPlaceholders.suffix='.beta'
            manifestPlaceholders.queryPkg=IDENTITYPROVIDER_PKG
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_VARIANT=1"
                }
            }
        }
        store{
            initWith(buildTypes["release"])
            matchingFallbacks.add("release")
            if (ksupload != null){
                logger.lifecycle("using $ksupload to sign build store")
                signingConfig signingConfigs.upload
            }
            setProperty("archivesBaseName","avocharts-${defaultConfig.versionCode}")
        }

    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures{
        prefab true
        viewBinding true
        compose true
    }
    lintOptions{
        abortOnError false
    }
    namespace 'de.wellenvogel.ochartsprovider'
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    applicationVariants.all { variant ->
        project.logger.lifecycle("Variant: " + variant.getName())
        def vname=variant.getName()
        def version=defaultConfig.versionCode
        variant.outputs.each { output ->
            def name=output.outputFileName
            def sign=""
            if (name.matches(/.*unsigned.*/)) sign="-unsigned"
            output.outputFileName="avocharts-$vname$sign-${version}.apk"
            logger.lifecycle("rename Outfile $name to $output.outputFileName")
        }
    }
}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.preference:preference:1.2.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    def core_version = "1.9.0"
    //implementation "androidx.core:core:$core_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation group: 'com.android.ndk.thirdparty', name: 'curl', version: '7.85.0-beta-1'
    implementation 'com.android.ndk.thirdparty:openssl:1.1.1g-alpha-1'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}
def BASE_PATH="../.."
File viewerDir = new File(project.projectDir, "$BASE_PATH/gui/build")
def taskgroup="gui"
task buildViewerRelease(type: org.gradle.api.tasks.GradleBuild) {
    group = taskgroup
    setDir BASE_PATH
    setTasks([":gui:viewerRelease"])
    startParameter.projectProperties.put("packageVersion",project.avnavVersion)
}
task buildViewerDebug(type: org.gradle.api.tasks.GradleBuild) {
    group = taskgroup
    setDir BASE_PATH
    setTasks([":gui:viewerDebug"])
    startParameter.projectProperties.put("packageVersion",project.avnavVersion)
}

task cleanViewer(type: GradleBuild){
    group = taskgroup
    setDir BASE_PATH
    setTasks(["cleanGui"])
    doLast{
        delete("$assetsDir/$ASSETS_GUI")
    }
}

task copyToAssetsViewerDebug(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from("$viewerDir/debug")
    into new File(assetsDir, ASSETS_GUI)
    doFirst {
        println("copy assets debug....")
    }
}
copyToAssetsViewerDebug.dependsOn(buildViewerDebug)
task copyToAssetsViewerRelease(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    into new File(assetsDir, ASSETS_GUI)
    from("$viewerDir/release")
}
copyToAssetsViewerRelease.dependsOn(buildViewerRelease)

task copyToAssetsS57Data(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from("$projectDir/../../s57data")
    into new File(assetsDir, ASSETS_S57)
}

task copyToAssetsPluginData(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    into new File(assetsDir, ASSETS_PLUGIN)
    from("$projectDir/../../gui/test"){
        include("icon.png")
    }
}
afterEvaluate {
    tasks["bundleStore"].doFirst{
        if (ksupload == null){
            throw new Exception("must have env ANDROID_KEYSTORE_UPLOAD for bundleStore")
        }
    }
}

/*
task copySounds(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from("../sounds")
    into new File(assetsDir, "sounds")
}
copyToAssetsViewerRelease.dependsOn(copySounds)
copyToAssetsViewerDebug.dependsOn(copySounds)
*/
afterEvaluate {
    generateDebugAssets.dependsOn(copyToAssetsViewerDebug)
    generateDebugAssets.dependsOn(copyToAssetsS57Data)
    generateDebugAssets.dependsOn(copyToAssetsPluginData)
    generateReleaseAssets.dependsOn(copyToAssetsViewerRelease)
    generateReleaseAssets.dependsOn(copyToAssetsS57Data)
    generateReleaseAssets.dependsOn(copyToAssetsPluginData)
    generateStoreAssets.dependsOn(copyToAssetsViewerRelease)
    generateStoreAssets.dependsOn(copyToAssetsS57Data)
    generateStoreAssets.dependsOn(copyToAssetsPluginData)
    generateBetaAssets.dependsOn(copyToAssetsViewerRelease)
    generateBetaAssets.dependsOn(copyToAssetsS57Data)
    generateBetaAssets.dependsOn(copyToAssetsPluginData)
    [lintVitalReportBeta,lintVitalAnalyzeBeta,lintVitalReportRelease, lintVitalAnalyzeRelease].each { task ->
        task.dependsOn(copyToAssetsViewerRelease)
        task.dependsOn(copyToAssetsS57Data)
        task.dependsOn(copyToAssetsPluginData)
    }
}
